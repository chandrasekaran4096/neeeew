$(document).ready(function () {
  const $cartContainer = $("#cartContainer");
  const $grandTotal = $("#grandTotal");
  const $selectedCount = $("#selectedCount");
  const $placeOrder = $("#placeOrder");

  // Load cart items from backend
  function loadCart() {
    $.ajax({
      url: "http://localhost:8080/BiteBudddy/CartApiServlet",
      method: "GET",
      dataType: "json",
      success: function (data) {
        renderCart(data);
        updateTotals();
      },
      error: function (xhr) {
        if (xhr.status === 401) {
          alert("Please login to view your cart.");
          window.location.href = "/login.html";
        } else {
          $cartContainer.html(`<p class="text-center text-red-400">Failed to load cart.</p>`);
        }
      }
    });
  }

  // Render cart items list
  function renderCart(items) {
    $cartContainer.empty();
    if (!items || items.length === 0) {
      $cartContainer.html(`<p class="text-center text-gray-400">Your cart is empty.</p>`);
      return;
    }

    // Ensure items all from same restaurant (backend ensures)
    items.forEach(item => {
      const itemTotal = (item.price * item.quantity).toFixed(2);
      const card = $(`
        <div class="bg-white/5 border border-white/6 rounded-2xl p-4 flex flex-col md:flex-row items-center justify-between gap-4">
          <div class="flex items-center gap-4 w-full md:w-3/4">
            <input type="checkbox" class="select-item w-5 h-5 accent-orange-500" data-id="${item.cartId}">
            <img src="${item.imagePath || '/assets/no-image.png'}" alt="${escapeHtml(item.itemName)}" class="cart-img shadow-lg">
            <div class="flex-1">
              <h3 class="text-lg font-semibold text-orange-300">${escapeHtml(item.itemName)}</h3>
              <p class="text-sm text-gray-300">${item.price.toFixed(2)} Each</p>
              <p class="text-sm text-gray-400 mt-1">Restaurant Name: ${item.name}</p>
            </div>
          </div>

          <div class="flex items-center gap-4 w-full md:w-auto justify-between md:justify-end">
            <div class="flex items-center gap-2 bg-white/3 rounded-lg px-3 py-1">
              <button class="decrease px-3 py-1 rounded bg-white/6 hover:bg-white/10" data-id="${item.cartId}">-</button>
              <span class="quantity font-semibold" id="qty-${item.cartId}">${item.quantity}</span>
              <button class="increase px-3 py-1 rounded bg-white/6 hover:bg-white/10" data-id="${item.cartId}">+</button>
            </div>
            <div class="text-right">
              <p class="text-sm text-gray-300">Total</p>
              <p class="text-lg font-bold"><span id="total-${item.cartId}">${itemTotal}</span></p>
              <button class="remove mt-2 text-sm text-red-400 hover:text-red-500" data-id="${item.cartId}">Remove</button>
            </div>
          </div>
        </div>
      `);
      $cartContainer.append(card);
    });
  }

  // Escape HTML to avoid XSS when rendering text from backend
  function escapeHtml(text) {
    if (!text) return '';
    return text.replace(/[&<>"'`=\/]/g, function (s) {
      return ({
        '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;','/':'&#x2F;','`':'&#x60;','=':'&#x3D;'
      })[s];
    });
  }

  // Update totals (for checked items)
  function updateTotals() {
    let total = 0;
    let count = 0;
    $(".select-item:checked").each(function () {
      const id = $(this).data("id");
      const qty = parseInt($(`#qty-${id}`).text(), 10);
      const priceText = $(`#total-${id}`).text();
      // We stored total per item; compute price as total/qty to avoid rounding issues
      const price = parseFloat(priceText) / (qty || 1);
      total += price * qty;
      count++;
    });
    $grandTotal.text(total.toFixed(2));
    $selectedCount.text(count);
    $placeOrder.prop("disabled", count === 0);
  }

  // Increase quantity
  $cartContainer.on("click", ".increase", function () {
    const cartId = $(this).data("id");
    const $qtySpan = $(`#qty-${cartId}`);
    let qty = parseInt($qtySpan.text(), 10);
    qty++;
    updateQuantityAjax(cartId, qty);
  });

  // Decrease quantity
  $cartContainer.on("click", ".decrease", function () {
    const cartId = $(this).data("id");
    const $qtySpan = $(`#qty-${cartId}`);
    let qty = parseInt($qtySpan.text(), 10);
    if (qty > 1) {
      qty--;
      updateQuantityAjax(cartId, qty);
    }
  });

  // Remove item
  $cartContainer.on("click", ".remove", function () {
    const cartId = $(this).data("id");
    if (!confirm("Remove this item from cart?")) return;
    $.ajax({
      url: "http://localhost:8080/BiteBudddy/CartApiServlet?action=delete",
      method: "POST",
      contentType: "application/json",
      data: JSON.stringify({ cart_id: cartId }),
      success: function (res) {
        if (res.success) {
          loadCart();
        } else {
          alert(res.message || "Failed to remove item.");
        }
      },
      error: function () {
        alert("Error while removing item.");
      }
    });
  });

  // Checkbox change
  $cartContainer.on("change", ".select-item", updateTotals);

  // Update quantity AJAX
  function updateQuantityAjax(cartId, qty) {
    $.ajax({
      url:"http://localhost:8080/BiteBudddy/CartApiServlet?action=update",
      method: "POST",
      contentType: "application/json",
      data: JSON.stringify({ cart_id: cartId, quantity: qty }),
      success: function (res) {
        if (res.success) {
          // update UI
          $(`#qty-${cartId}`).text(qty);
          // recalc and set item total from returned price if provided else compute
          if (res.itemTotal !== undefined) {
            $(`#total-${cartId}`).text(res.itemTotal.toFixed(2));
          } else {

            loadCart();
          }
          updateTotals();
        } else {
          alert(res.message || "Failed to update quantity.");
          loadCart();
        }
      },
      error: function () {
        alert("Error updating quantity.");
      }
    });
  }


  // initial load
  loadCart();


  // Show order modal
$("#placeOrder").on("click", function () {
  const selectedItems = $(".select-item:checked");
  if (selectedItems.length === 0) {
    alert("Please select at least one item.");
    return;
  }
  $("#orderModal").removeClass("hidden");
});

// Cancel order modal
$("#cancelOrder").on("click", function () {
  $("#orderModal").addClass("hidden");
});

// Confirm order
$("#confirmOrder").on("click", function () {
  const address = $("#shippingAddress").val().trim();
  const payment = $("#paymentMode").val();

  if (!address || !payment) {
    alert("Please fill in both address and payment method.");
    return;
  }

  const selectedIds = [];
  $(".select-item:checked").each(function () {
    selectedIds.push($(this).data("id"));
  });

  $.ajax({
    url: "http://localhost:8080/BiteBudddy/OrderServlet",
    method: "POST",
    contentType: "application/json",
    data: JSON.stringify({
      cartIds: selectedIds,
      address: address,
      paymentMode: payment
    }),
    success: function (res) {
      if (res.success) {
        $("#orderModal").addClass("hidden");
        alert("Order placed successfully!");
        window.location.href = "restaurant.html";
      } else {
        alert(res.message || "Failed to place order.");
      }
    },
    error: function () {
      alert("Server error placing order.");
    }
  });
});

});
